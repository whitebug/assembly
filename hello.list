     1                                  %include "stud_io.inc"
     1                              <1> ;; File stud_io.inc for both Linux and FreeBSD.
     2                              <1> ;;
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009, 2015, 2017
     4                              <1> ;;
     5                              <1> ;; I, the author, hereby grant everyone the right to use this file for any
     6                              <1> ;; purpose, in any manner, in it's original or modified form, provided that
     7                              <1> ;; modified versions are clearly marked as such AND the original author's
     8                              <1> ;; copyright notice is kept along with the other authors' copyright notices
     9                              <1> ;; as appropriate within the file.
    10                              <1> ;;
    11                              <1> ;; Only the file as such must retain the copyright notice.  Programs created
    12                              <1> ;; using this file (e.g. binaries) don't need to have any mentions of the fact
    13                              <1> ;; this file was used to create them.
    14                              <1> ;; 
    15                              <1> ;; This file is provided as is, with absolutely NO WARRANTY, and this
    16                              <1> ;; statement must be taken literally: "NO" means "NO", period.  Should
    17                              <1> ;; this needs additional clarifications, I'd like you to search Internet
    18                              <1> ;; for various types of warranty (e.g., implied, hidden, etc) and take
    19                              <1> ;; into account that you don't have them all.
    20                              <1> ;;
    21                              <1> 
    22                              <1> %define STUD_IO_LINUX
    23                              <1> ;%define STUD_IO_FREEBSD
    24                              <1> 
    25                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    26                              <1> ;; system dependend part
    27                              <1> 
    28                              <1> %ifdef STUD_IO_LINUX
    29                              <1> 
    30                              <1> ; generic 3-param syscall
    31                              <1> %macro _syscall_3 4
    32                              <1> 	push edx
    33                              <1> 	push ecx
    34                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    35                              <1> 	push %1
    36                              <1> 	push %2
    37                              <1> 	push %3
    38                              <1> 	push %4
    39                              <1> 	pop edx
    40                              <1> 	pop ecx
    41                              <1> 	pop ebx
    42                              <1> 	pop eax 
    43                              <1> 	int 0x80
    44                              <1> 	pop ebx
    45                              <1> 	pop ecx
    46                              <1> 	pop edx
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    50                              <1> %macro _syscall_exit 1
    51                              <1> 	mov ebx, %1	; exit code
    52                              <1> 	mov eax, 1	; 1 = sys_exit
    53                              <1> 	int 0x80
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %elifdef STUD_IO_FREEBSD
    57                              <1> 
    58                              <1> ; generic 3-param syscall
    59                              <1> %macro _syscall_3 4
    60                              <1> 	push	%4
    61                              <1> 	push	%3
    62                              <1> 	push	%2
    63                              <1> 	mov	eax, %1
    64                              <1> 	push	eax
    65                              <1> 	int	0x80
    66                              <1> 	add	esp, 16
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro _syscall_exit 1
    70                              <1> 	push	%1	; exit code
    71                              <1> 	mov	eax, 1	; 1 = sys_exit
    72                              <1> 	push	eax
    73                              <1> 	int	0x80
    74                              <1> 	; no cleanup - this will never return anyway
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %else
    78                              <1> %error You must define either STUD_IO_LINUX or STUD_IO_FREEBSD
    79                              <1> %endif
    80                              <1> 
    81                              <1> ;; system dependent part ends here
    82                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    83                              <1> 
    84                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    85                              <1> ; output: eax: read bytes
    86                              <1> %macro _syscall_read 3
    87                              <1> 	_syscall_3 3,%1,%2,%3
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    91                              <1> ; output: eax: written bytes
    92                              <1> %macro _syscall_write 3
    93                              <1> 	_syscall_3 4,%1,%2,%3
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    97                              <1> %macro 	PRINT 1
    98                              <1> 	pusha
    99                              <1> 	pushf
   100                              <1> 	jmp %%astr
   101                              <1> %%str	db	%1
   102                              <1> %%strln	equ	$-%%str
   103                              <1> %%astr:	_syscall_write 1, %%str, %%strln
   104                              <1> 	popf
   105                              <1> 	popa
   106                              <1> %endmacro
   107                              <1> 
   108                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   109                              <1> %macro	PUTCHAR 1
   110                              <1> 	pusha
   111                              <1> 	pushf
   112                              <1> %ifstr %1
   113                              <1> 	mov	al, %1
   114                              <1> %elifnum %1
   115                              <1> 	mov	al, %1
   116                              <1> %elifidni %1,al
   117                              <1> 	nop
   118                              <1> %elifidni %1,ah
   119                              <1> 	mov	al, ah
   120                              <1> %elifidni %1,bl
   121                              <1> 	mov	al, bl
   122                              <1> %elifidni %1,bh
   123                              <1> 	mov	al, bh
   124                              <1> %elifidni %1,cl
   125                              <1> 	mov	al, cl
   126                              <1> %elifidni %1,ch
   127                              <1> 	mov	al, ch
   128                              <1> %elifidni %1,dl
   129                              <1> 	mov	al, dl
   130                              <1> %elifidni %1,dh
   131                              <1> 	mov	al, dh
   132                              <1> %else
   133                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
   134                              <1> %endif
   135                              <1> 	sub	esp, 4  ; reserve memory for buffer
   136                              <1> 	mov	edi, esp
   137                              <1> 	mov	[edi], al
   138                              <1> 	_syscall_write 1, edi, 1
   139                              <1> 	add	esp, 4
   140                              <1> 	popf
   141                              <1> 	popa
   142                              <1> %endmacro
   143                              <1> 
   144                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   145                              <1> %macro	GETCHAR 0
   146                              <1> 	pushf
   147                              <1> 	push	edi
   148                              <1> 	sub	esp, 4
   149                              <1> 	mov	edi, esp
   150                              <1> 	_syscall_read 0, edi, 1
   151                              <1> 	cmp	eax, 1
   152                              <1> 	jne	%%eof_reached
   153                              <1> 	xor	eax, eax
   154                              <1> 	mov	al, [edi]
   155                              <1> 	jmp	%%gcquit
   156                              <1> %%eof_reached:
   157                              <1> 	xor	eax, eax
   158                              <1> 	not	eax 		; eax := -1
   159                              <1> %%gcquit:
   160                              <1> 	add	esp, 4
   161                              <1> 	pop	edi
   162                              <1> 	popf
   163                              <1> %endmacro
   164                              <1> 
   165                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   166                              <1> %macro FINISH 0-1 0
   167                              <1> 	_syscall_exit %1
   168                              <1> %endmacro
     2                                  global _start
     3                                  
     4                                  section .text
     5 00000000 B800000000              _start: mov	eax, 0
     6                                  again:	PRINT	"Hello"
     6                              <1> again: 
     6 00000005 60                  <1>  pusha
     6 00000006 9C                  <1>  pushf
     6 00000007 EB05                <1>  jmp %%astr
     6 00000009 48656C6C6F          <1> %%str db %1
     6                              <1> %%strln equ $-%%str
     6                              <1> %%astr: _syscall_write 1, %%str, %%strln
     6                              <2> ..@2.astr: 
     6                              <2>  _syscall_3 4,%1,%2,%3
     6 0000000E 52                  <3>  push edx
     6 0000000F 51                  <3>  push ecx
     6 00000010 53                  <3>  push ebx
     6 00000011 6A04                <3>  push %1
     6 00000013 6A01                <3>  push %2
     6 00000015 68[09000000]        <3>  push %3
     6 0000001A 6A05                <3>  push %4
     6 0000001C 5A                  <3>  pop edx
     6 0000001D 59                  <3>  pop ecx
     6 0000001E 5B                  <3>  pop ebx
     6 0000001F 58                  <3>  pop eax
     6 00000020 CD80                <3>  int 0x80
     6 00000022 5B                  <3>  pop ebx
     6 00000023 59                  <3>  pop ecx
     6 00000024 5A                  <3>  pop edx
     6 00000025 9D                  <1>  popf
     6 00000026 61                  <1>  popa
     7                                  	PUTCHAR	10
     7 00000027 60                  <1>  pusha
     7 00000028 9C                  <1>  pushf
     7                              <1> %ifstr %1
     7                              <1>  mov al, %1
     7                              <1> %elifnum %1
     7 00000029 B00A                <1>  mov al, %1
     7                              <1> %elifidni %1,al
     7                              <1>  nop
     7                              <1> %elifidni %1,ah
     7                              <1>  mov al, ah
     7                              <1> %elifidni %1,bl
     7                              <1>  mov al, bl
     7                              <1> %elifidni %1,bh
     7                              <1>  mov al, bh
     7                              <1> %elifidni %1,cl
     7                              <1>  mov al, cl
     7                              <1> %elifidni %1,ch
     7                              <1>  mov al, ch
     7                              <1> %elifidni %1,dl
     7                              <1>  mov al, dl
     7                              <1> %elifidni %1,dh
     7                              <1>  mov al, dh
     7                              <1> %else
     7                              <1>  mov al, %1
     7                              <1> %endif
     7 0000002B 83EC04              <1>  sub esp, 4
     7 0000002E 89E7                <1>  mov edi, esp
     7 00000030 8807                <1>  mov [edi], al
     7                              <1>  _syscall_write 1, edi, 1
     7                              <2>  _syscall_3 4,%1,%2,%3
     7 00000032 52                  <3>  push edx
     7 00000033 51                  <3>  push ecx
     7 00000034 53                  <3>  push ebx
     7 00000035 6A04                <3>  push %1
     7 00000037 6A01                <3>  push %2
     7 00000039 57                  <3>  push %3
     7 0000003A 6A01                <3>  push %4
     7 0000003C 5A                  <3>  pop edx
     7 0000003D 59                  <3>  pop ecx
     7 0000003E 5B                  <3>  pop ebx
     7 0000003F 58                  <3>  pop eax
     7 00000040 CD80                <3>  int 0x80
     7 00000042 5B                  <3>  pop ebx
     7 00000043 59                  <3>  pop ecx
     7 00000044 5A                  <3>  pop edx
     7 00000045 83C404              <1>  add esp, 4
     7 00000048 9D                  <1>  popf
     7 00000049 61                  <1>  popa
     8 0000004A 40                      	inc	eax
     9 0000004B 83F805                  	cmp	eax, 5
    10 0000004E 7CB5                    	jl	again
    11                                  	FINISH
    11                              <1>  _syscall_exit %1
    11 00000050 BB00000000          <2>  mov ebx, %1
    11 00000055 B801000000          <2>  mov eax, 1
    11 0000005A CD80                <2>  int 0x80
